
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jgranados.koky.interpreter.parser;

import com.jgranados.koky.interpreter.lexer.Lexer;
import com.jgranados.koky.interpreter.lexer.languages.LexerAll;
import com.jgranados.koky.interpreter.lexer.languages.LexerEs;
import com.jgranados.koky.interpreter.lexer.languages.LexerKiche;
import com.jgranados.koky.interpreter.token.Token;
import com.jgranados.koky.interpreter.expr.Expr;
import com.jgranados.koky.interpreter.symbolstable.SymbolsTable;
import com.jgranados.koky.instructions.logic.Languages;
import com.jgranados.koky.instructions.logic.Messages;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.jgranados.koky.instructions.*;
import com.jgranados.koky.instructions.graphicinstructions.*;
import com.jgranados.koky.instructions.varinstructions.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\007\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\005\000" +
    "\002\005\010\000\002\005\004\000\002\005\006\000\002" +
    "\005\003\000\002\005\004\000\002\004\004\000\002\004" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\004\000\002" +
    "\006\004\000\002\006\006\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\007\000" +
    "\002\006\005\000\002\006\004\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\007\003" +
    "\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\054\003\027\004\023\007\014\022\020\023" +
    "\016\024\017\025\022\026\031\027\004\030\021\031\010" +
    "\032\011\033\006\034\015\035\013\036\030\037\024\040" +
    "\025\041\026\042\033\043\007\001\002\000\004\004\175" +
    "\001\002\000\056\002\000\003\027\004\023\007\014\022" +
    "\020\023\016\024\017\025\022\026\031\027\004\030\021" +
    "\031\010\032\011\033\006\034\015\035\013\036\030\037" +
    "\024\040\025\041\026\042\033\043\007\001\002\000\010" +
    "\005\035\007\034\013\036\001\002\000\010\005\035\007" +
    "\034\013\036\001\002\000\004\004\165\001\002\000\012" +
    "\005\035\006\161\007\034\013\036\001\002\000\004\002" +
    "\160\001\002\000\010\005\035\007\034\013\036\001\002" +
    "\000\006\004\153\021\152\001\002\000\010\005\035\007" +
    "\034\013\036\001\002\000\010\005\035\007\034\013\036" +
    "\001\002\000\010\005\035\007\034\013\036\001\002\000" +
    "\010\005\035\007\034\013\036\001\002\000\004\004\141" +
    "\001\002\000\010\005\035\007\034\013\036\001\002\000" +
    "\056\002\uffe8\003\uffe8\004\uffe8\007\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\001\002\000\004\004\136\001" +
    "\002\000\004\004\135\001\002\000\004\004\134\001\002" +
    "\000\006\004\133\022\131\001\002\000\004\004\130\001" +
    "\002\000\004\004\127\001\002\000\056\002\ufffe\003\ufffe" +
    "\004\ufffe\007\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\001\002\000\010\005\035\007\034\013\036\001\002" +
    "\000\074\003\uffca\004\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\001\002\000\074\003" +
    "\uffc9\004\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\001\002\000\010\005\035\007\034" +
    "\013\036\001\002\000\014\011\041\015\042\016\043\017" +
    "\040\020\044\001\002\000\010\005\035\007\034\013\036" +
    "\001\002\000\052\003\072\007\057\022\063\023\061\024" +
    "\062\025\065\026\074\027\050\030\064\031\053\032\054" +
    "\033\051\034\060\035\056\036\073\037\067\040\071\041" +
    "\070\042\075\043\052\001\002\000\010\005\035\007\034" +
    "\013\036\001\002\000\010\005\035\007\034\013\036\001" +
    "\002\000\010\005\035\007\034\013\036\001\002\000\074" +
    "\003\uffcc\004\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\001\002\000\074\003\uffce\004" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\040\020\044\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\001\002\000\074\003\uffcf\004\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\040\020\044\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\001\002\000\054\003\uffdf\007\uffdf\012\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\001\002\000\010\005\035" +
    "\007\034\013\036\001\002\000\010\005\035\007\034\013" +
    "\036\001\002\000\054\003\uffdd\007\uffdd\012\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\001\002\000\012\005" +
    "\035\006\116\007\034\013\036\001\002\000\054\003\uffe5" +
    "\007\uffe5\012\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\001\002\000\010\005\035\007\034\013\036\001\002" +
    "\000\004\021\113\001\002\000\010\005\035\007\034\013" +
    "\036\001\002\000\010\005\035\007\034\013\036\001\002" +
    "\000\010\005\035\007\034\013\036\001\002\000\010\005" +
    "\035\007\034\013\036\001\002\000\054\003\uffde\007\uffde" +
    "\012\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\001" +
    "\002\000\010\005\035\007\034\013\036\001\002\000\054" +
    "\003\072\007\057\012\104\022\063\023\061\024\062\025" +
    "\065\026\074\027\050\030\064\031\053\032\054\033\051" +
    "\034\060\035\056\036\073\037\067\040\071\041\070\042" +
    "\075\043\052\001\002\000\054\003\uffd6\007\uffd6\012\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\001\002\000" +
    "\054\003\uffd4\007\uffd4\012\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\001\002\000\054\003\uffd5\007\uffd5\012" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\001\002" +
    "\000\004\012\103\001\002\000\054\003\uffd7\007\uffd7\012" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\001\002" +
    "\000\054\003\uffe0\007\uffe0\012\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\001\002\000\010\005\035\007\034" +
    "\013\036\001\002\000\014\011\077\015\042\016\043\017" +
    "\040\020\044\001\002\000\052\003\072\007\057\022\063" +
    "\023\061\024\062\025\065\026\074\027\050\030\064\031" +
    "\053\032\054\033\051\034\060\035\056\036\073\037\067" +
    "\040\071\041\070\042\075\043\052\001\002\000\054\003" +
    "\072\007\057\012\101\022\063\023\061\024\062\025\065" +
    "\026\074\027\050\030\064\031\053\032\054\033\051\034" +
    "\060\035\056\036\073\037\067\040\071\041\070\042\075" +
    "\043\052\001\002\000\054\003\uffd2\007\uffd2\012\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002\000\054" +
    "\003\uffe6\007\uffe6\012\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\001\002\000\054\003\uffd0\007\uffd0\012\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002\000" +
    "\004\004\105\001\002\000\056\002\uffeb\003\uffeb\004\uffeb" +
    "\007\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001" +
    "\002\000\064\003\uffe1\007\uffe1\012\uffe1\015\042\016\043" +
    "\017\040\020\044\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\001\002\000\064\003\uffe4\007\uffe4\012\uffe4\015\042" +
    "\016\043\017\040\020\044\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\001\002\000\064\003\uffe2\007\uffe2\012\uffe2" +
    "\015\042\016\043\017\040\020\044\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\001\002\000\064\003\uffe3\007\uffe3" +
    "\012\uffe3\015\042\016\043\017\040\020\044\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\001\002\000\064\003\uffd9" +
    "\007\uffd9\012\uffd9\015\042\016\043\017\040\020\044\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\001\002\000\010" +
    "\005\035\007\034\013\036\001\002\000\064\003\uffd1\007" +
    "\uffd1\012\uffd1\015\042\016\043\017\040\020\044\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\001\002\000\064\003" +
    "\uffd8\007\uffd8\012\uffd8\015\042\016\043\017\040\020\044" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002\000" +
    "\054\003\uffdb\007\uffdb\012\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\001\002\000\064\003\uffdc\007\uffdc\012" +
    "\uffdc\015\042\016\043\017\040\020\044\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\001\002\000\064\003\uffd3\007" +
    "\uffd3\012\uffd3\015\042\016\043\017\040\020\044\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\001\002\000\014\010" +
    "\122\015\042\016\043\017\040\020\044\001\002\000\010" +
    "\005\035\007\034\013\036\001\002\000\064\003\uffda\007" +
    "\uffda\012\uffda\015\042\016\043\017\040\020\044\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\001\002\000\074\003" +
    "\uffcd\004\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\001\002\000\014\014\126\015\042" +
    "\016\043\017\040\020\044\001\002\000\074\003\uffcb\004" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\001\002\000\056\002\ufff9\003\ufff9\004\ufff9" +
    "\007\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\001" +
    "\002\000\056\002\ufff0\003\ufff0\004\ufff0\007\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\001\002\000\056\002" +
    "\uffc8\003\uffc8\004\uffc8\007\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\001\002\000\056\002\uffe7\003\uffe7\004" +
    "\uffe7\007\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\001\002\000\056\002\uffc7\003\uffc7\004\uffc7\007\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002\000\056" +
    "\002\uffed\003\uffed\004\uffed\007\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\001\002\000\056\002\uffee\003\uffee" +
    "\004\uffee\007\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\001\002\000\056\002\uffef\003\uffef\004\uffef\007\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\001\002\000" +
    "\014\004\140\015\042\016\043\017\040\020\044\001\002" +
    "\000\056\002\ufffa\003\ufffa\004\ufffa\007\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\001\002\000\056\002\ufff7" +
    "\003\ufff7\004\ufff7\007\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\001\002\000\014\004\143\015\042\016\043" +
    "\017\040\020\044\001\002\000\056\002\ufffd\003\ufffd\004" +
    "\ufffd\007\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\001\002\000\014\004\145\015\042\016\043\017\040\020" +
    "\044\001\002\000\056\002\ufffb\003\ufffb\004\ufffb\007\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002\000" +
    "\014\004\147\015\042\016\043\017\040\020\044\001\002" +
    "\000\056\002\ufffc\003\ufffc\004\ufffc\007\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002\000\014\004\151" +
    "\015\042\016\043\017\040\020\044\001\002\000\056\002" +
    "\ufff2\003\ufff2\004\ufff2\007\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\001\002\000\010\005\035\007\034\013" +
    "\036\001\002\000\056\002\uffea\003\uffea\004\uffea\007\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\001\002\000" +
    "\014\004\155\015\042\016\043\017\040\020\044\001\002" +
    "\000\056\002\uffe9\003\uffe9\004\uffe9\007\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\001\002\000\014\004\157" +
    "\015\042\016\043\017\040\020\044\001\002\000\056\002" +
    "\ufff1\003\ufff1\004\ufff1\007\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\001\002\000\004\002\001\001\002\000" +
    "\004\004\164\001\002\000\014\004\163\015\042\016\043" +
    "\017\040\020\044\001\002\000\056\002\ufff5\003\ufff5\004" +
    "\ufff5\007\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\001\002\000\056\002\ufff4\003\ufff4\004\ufff4\007\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\001\002\000\056" +
    "\002\ufff6\003\ufff6\004\ufff6\007\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\001\002\000\014\004\167\015\042" +
    "\016\043\017\040\020\044\001\002\000\056\002\uffec\003" +
    "\uffec\004\uffec\007\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\001\002\000\014\010\171\015\042\016\043\017" +
    "\040\020\044\001\002\000\010\005\035\007\034\013\036" +
    "\001\002\000\014\004\173\015\042\016\043\017\040\020" +
    "\044\001\002\000\056\002\ufff3\003\ufff3\004\ufff3\007\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\001\002\000" +
    "\056\002\uffff\003\uffff\004\uffff\007\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\043\uffff\001\002\000\056\002\ufff8\003" +
    "\ufff8\004\ufff8\007\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\010\002\011\003\004\005\031\001\001\000" +
    "\002\001\001\000\004\005\173\001\001\000\004\010\167" +
    "\001\001\000\004\010\165\001\001\000\002\001\001\000" +
    "\004\010\161\001\001\000\002\001\001\000\004\010\155" +
    "\001\001\000\002\001\001\000\004\010\147\001\001\000" +
    "\004\010\145\001\001\000\004\010\143\001\001\000\004" +
    "\010\141\001\001\000\002\001\001\000\004\010\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\124\001\001\000\002\001\001\000\004\010\123\001\001" +
    "\000\006\004\065\006\054\001\001\000\004\010\046\001" +
    "\001\000\004\010\045\001\001\000\004\010\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\120\001\001\000\004\010\117" +
    "\001\001\000\002\001\001\000\004\010\116\001\001\000" +
    "\002\001\001\000\004\010\114\001\001\000\002\001\001" +
    "\000\004\010\111\001\001\000\004\010\110\001\001\000" +
    "\004\010\107\001\001\000\004\010\106\001\001\000\002" +
    "\001\001\000\004\010\105\001\001\000\004\006\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\075\001\001\000\002\001\001\000\006\004\077" +
    "\006\054\001\001\000\004\006\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



       private Lexer lexerEnglish;
        private LexerEs lexerEs;
        private LexerKiche lexerKi;
        private LexerAll lexerAll;
        private List<String> errorsList;
        private SymbolsTable symTable;

	// LA TABLA DE SIMBOLOS SE REINICIA CADA VEZ QUE SE SELECCIONA UN IDIOMA
        
        public Parser(Scanner scan, SymbolsTable symTable){
            super(scan);
             if (Languages.ALL.getTypeLanguage()==true) {
                lexerAll = (LexerAll) scan;
                this.errorsList = lexerAll.getErrorsList();
            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                lexerEnglish = (Lexer) scan;
                this.errorsList = lexerEnglish.getErrorsList();
            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                lexerEs = (LexerEs) scan;
                this.errorsList = lexerEs.getErrorsList();
            }else if (Languages.KICHE.getTypeLanguage()==true) {
                lexerKi = (LexerKiche) scan;
                this.errorsList = lexerKi.getErrorsList();
            }
            this.symTable = symTable;
        }
       
        @Override
        public void syntax_error(Symbol st) {
            //validation to respond according to language   
            if (Languages.ALL.getTypeLanguage()==true) {
                getAnalyzingFile(st, Languages.ALL);
            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                getAnalyzingFile(st, Languages.ENGLISH);
            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                getAnalyzingFile(st, Languages.SPANISH);
            }else if (Languages.KICHE.getTypeLanguage()==true) {
                getAnalyzingFile(st, Languages.KICHE);
            }  
        }
        
        private void getAnalyzingFile(Symbol st, Enum typeLanguage){
                if (st.sym != sym.LINE_TERMINATOR) {
                    Token token = (Token) st.value;
                    report_error(Messages.reportError(token.getLexeme(),token.getLine(),token.getColumn()),null);
                    if (typeLanguage.equals(Languages.KICHE)) {
                        if (lexerKi.isAnalyzingFile()) {
                            errorsList(token);
                        } else {
                            errorsList(token);
                        }
                    }else if (typeLanguage.equals(Languages.SPANISH)) {
                        if (lexerEs.isAnalyzingFile()) {
                            errorsList(token);
                        } else {
                            errorsList(token);
                        }
                    }else if (typeLanguage.equals(Languages.ENGLISH)) {
                        if (lexerEnglish.isAnalyzingFile()) {
                            errorsList(token);
                        } else {
                            errorsList(token);
                        }
                    }else if (typeLanguage.equals(Languages.ALL)) {
                        if (lexerAll.isAnalyzingFile()) {
                            errorsList(token);
                        } else {
                            errorsList(token);
                        }
                    }
                }
        }

        private void getColorError(Enum typeLanguage, int token){
                    if (typeLanguage.equals(Languages.KICHE)) {
                        if (lexerKi.isAnalyzingFile()) {
                            errorsList.add(Messages.colorErrorMessage(token));
                        } else {
                            errorsList.add(Messages.colorErrorMessage(token));
                        }
                    }else if (typeLanguage.equals(Languages.SPANISH)) {
                        if (lexerEs.isAnalyzingFile()) {
                            errorsList.add(Messages.colorErrorMessage(token));
                        } else {
                            errorsList.add(Messages.colorErrorMessage(token));
                        }
                    }else if (typeLanguage.equals(Languages.ENGLISH)) {
                        if (lexerEnglish.isAnalyzingFile()) {
                           errorsList.add(Messages.colorErrorMessage(token));
                        } else {
                            errorsList.add(Messages.colorErrorMessage(token));
                        }
                    }else if (typeLanguage.equals(Languages.ALL)) {
                        if (lexerAll.isAnalyzingFile()) {
                           errorsList.add(Messages.colorErrorMessage(token));
                        } else {
                           errorsList.add(Messages.colorErrorMessage(token));
                        }
                    }
        }
        
        private void errorsList(Token token){
            errorsList.add(Messages.errorCup(token.getLexeme()));
        }   

        public void addSemanticError(String msg) {
            this.errorsList.add(msg);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= instructions 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        list.add(ins);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction 
            {
              List<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Instruction> instructions = new ArrayList<>();
                        instructions.add(ins);
                        RESULT = instructions;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= FORWARD expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un forward con n = " + e);
                        RESULT = new ForwardInstruction(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= BACKWARD expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un backward con n = " + e);
                        RESULT = new BackwardInstruction(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= RIGHT expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un RIGHT con n = " + e);
                        RESULT = new RightInstruction(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= LEFT expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un LEFT con n = " + e);
                        RESULT = new LeftInstruction(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= CLEARS LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un CLEAR ");
                        RESULT = new ClearsInstruction();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= PENUP LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un PENUP ");
                        RESULT = new TogglePenInstruction(true);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= PENDOWN LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un PENDOWN ");
                        RESULT = new TogglePenInstruction(false);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= TOCENTER LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un TOCENTER ");
                        RESULT = new ToCenterInstruction();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= COLOR expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token color = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un color ");
                        RESULT = new ColorInstruction(e);
                        if (e.operate() >= 0 && e.operate() < 10) {
                            RESULT = new ColorInstruction(e);
                        } else {
                            if (Languages.ALL.getTypeLanguage()==true) {
                                if (Languages.ALL.getTypeLanguage()==true) {
                                getColorError(Languages.ALL, e.operate());
                            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                                getColorError(Languages.ENGLISH, e.operate());
                            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                                getColorError(Languages.SPANISH, e.operate());
                            }else if (Languages.KICHE.getTypeLanguage()==true) {
                                getColorError(Languages.KICHE, e.operate());
                            }
                            
                            RESULT = new EmptyInstruction();
                            }
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= COLOR HEXA_LITERAL LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un color ");
                        RESULT = new ColorInstruction(e.getLexeme());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= POSITIONXY expr COMMA expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr ey = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un POSITIONXY ");
                        RESULT = new PositionXYInstruction(ex, ey);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= POSITIONX expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un POSITIONX ");
                        RESULT = new PositionXInstruction(ex);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= POSITIONY expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr ey = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                        System.out.println("un POSITIONY ");
                        RESULT = new PositionYInstruction(ey);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= HIDETURTLE LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un HIDETURTLE ");
                        RESULT = new ToggleTurtleInstruction(false);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= SHOWTURTLE LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un SHOWTURTLE ");
                        RESULT = new ToggleTurtleInstruction(true);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= TOERASE LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un TOERASE ");
                        RESULT = new ToggleDrawInstruction(false);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= TODRAW LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un TODRAW ");
                        RESULT = new ToggleDrawInstruction(true);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= WIDTH expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        if(e.operate() > 0 && e.operate() < 16) {
                            RESULT = new WidthInstruction(e);
                        } else {
                            errorsList.add(Messages.widthErrorMessage(e.operate()));
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruction ::= REPEAT expr OPEN_BRACKET instructionsRepeat CLOSE_BRACKET LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruction> inst = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        System.out.println("un REPEAT CON " + e);
                        RESULT = new RepeatInstruction(e, inst);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= ID LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         if (Languages.ALL.getTypeLanguage()==true) {
                             symTable.addId(e, 0, lexerAll.isAnalyzingFile());
                         }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                            symTable.addId(e, 0, lexerEnglish.isAnalyzingFile());
                         }else if (Languages.SPANISH.getTypeLanguage()==true) {
                            symTable.addId(e, 0, lexerEs.isAnalyzingFile());
                         }else if (Languages.KICHE.getTypeLanguage()==true) {
                            symTable.addId(e, 0, lexerKi.isAnalyzingFile());
                         }
                          RESULT = new EmptyInstruction();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= ID EQ expr LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VarAssignationInstruction(symTable, e, ex);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= LINE_TERMINATOR 
            {
              Instruction RESULT =null;
		  
                        System.out.println("Vacio, no hago nada");
                        RESULT = new EmptyInstruction();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruction ::= error syncToken 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("--------Error nnn  " + eleft + eright); RESULT = new EmptyInstruction(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instructionsRepeat ::= instructionsRepeat instructionRepeat 
            {
              List<Instruction> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                                list.add(ins);
                                RESULT = list;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionsRepeat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instructionsRepeat ::= instructionRepeat 
            {
              List<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                List<Instruction> instructions = new ArrayList<>();
                                instructions.add(ins);
                                RESULT = instructions;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionsRepeat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instructionRepeat ::= FORWARD expr 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un forward con n = " + e);
                        RESULT = new ForwardInstruction(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instructionRepeat ::= BACKWARD expr 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un backward con n = " + e);
                        RESULT = new BackwardInstruction(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instructionRepeat ::= RIGHT expr 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un RIGHT con n = " + e);
                        RESULT = new RightInstruction(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instructionRepeat ::= LEFT expr 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un LEFT con n = " + e);
                        RESULT = new LeftInstruction(e);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instructionRepeat ::= CLEARS 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un CLEAR ");
                        RESULT = new ClearsInstruction();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instructionRepeat ::= PENUP 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un PENUP ");
                        RESULT = new TogglePenInstruction(true);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instructionRepeat ::= PENDOWN 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un PENDOWN ");
                        RESULT = new TogglePenInstruction(false);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instructionRepeat ::= TOCENTER 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un TOCENTER ");
                        RESULT = new ToCenterInstruction();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instructionRepeat ::= COLOR expr 
            {
              Instruction RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token color = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un color ");
                        RESULT = new ColorInstruction(e);
                         if (e.operate() >= 0 && e.operate() < 10) {
                            RESULT = new ColorInstruction(e);
                        } else {
                            if (Languages.ALL.getTypeLanguage()==true) {
                                if (Languages.ALL.getTypeLanguage()==true) {
                                getColorError(Languages.ALL, e.operate());
                            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                                getColorError(Languages.ENGLISH, e.operate());
                            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                                getColorError(Languages.SPANISH, e.operate());
                            }else if (Languages.KICHE.getTypeLanguage()==true) {
                                getColorError(Languages.KICHE, e.operate());
                            }
                            
                            RESULT = new EmptyInstruction();
                            }
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instructionRepeat ::= COLOR HEXA_LITERAL 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un color ");
                        RESULT = new ColorInstruction(e.getLexeme());
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instructionRepeat ::= POSITIONXY expr COMMA expr 
            {
              Instruction RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ey = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un POSITIONXY ");
                        RESULT = new PositionXYInstruction(ex, ey);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instructionRepeat ::= POSITIONX expr 
            {
              Instruction RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un POSITIONX ");
                        RESULT = new PositionXInstruction(ex);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instructionRepeat ::= POSITIONY expr 
            {
              Instruction RESULT =null;
		int eyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ey = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        System.out.println("un POSITIONY ");
                        RESULT = new PositionYInstruction(ey);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instructionRepeat ::= HIDETURTLE 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un HIDETURTLE ");
                        RESULT = new ToggleTurtleInstruction(false);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instructionRepeat ::= SHOWTURTLE 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un SHOWTURTLE ");
                        RESULT = new ToggleTurtleInstruction(true);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instructionRepeat ::= TOERASE 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un TOERASE ");
                        RESULT = new ToggleDrawInstruction(false);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instructionRepeat ::= TODRAW 
            {
              Instruction RESULT =null;
		  
                        System.out.println("un TODRAW ");
                        RESULT = new ToggleDrawInstruction(true);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instructionRepeat ::= WIDTH expr 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(e.operate() > 0 && e.operate() < 16) {
                            RESULT = new WidthInstruction(e);
                        } else {
                            errorsList.add(Messages.widthErrorMessage(e.operate()));
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instructionRepeat ::= REPEAT expr OPEN_BRACKET instructionsRepeat CLOSE_BRACKET 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> inst = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        System.out.println("un REPEAT CON " + e);
                        RESULT = new RepeatInstruction(e, inst);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instructionRepeat ::= ID EQ expr 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new VarAssignationInstruction(symTable, e, ex);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instructionRepeat ::= error CLOSE_BRACKET 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("--------Error nnn  "); RESULT = new EmptyInstruction(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionRepeat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Expr(sym.PLUS, e1, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Expr(sym.MINUS, e1, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr MULT expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Expr(sym.MULT, e1, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Expr(sym.DIV, e1, e2);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= OPEN_PAR expr CLOSE_PAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = e;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= ID 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                     if (Languages.ALL.getTypeLanguage()==true) {
                        if (symTable.exists(e, lexerAll.isAnalyzingFile())) {
                            RESULT = new Expr(e, symTable);
                        } else {
                            RESULT = null;
                        }
                     }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                        if (symTable.exists(e, lexerEnglish.isAnalyzingFile())) {
                            RESULT = new Expr(e, symTable);
                        } else {
                            RESULT = null;
                        }
                     }else if (Languages.SPANISH.getTypeLanguage()==true) {
                        if (symTable.exists(e, lexerEs.isAnalyzingFile())) {
                            RESULT = new Expr(e, symTable);
                        } else {
                            RESULT = null;
                        }
                     }else if (Languages.KICHE.getTypeLanguage()==true) {
                        if (symTable.exists(e, lexerKi.isAnalyzingFile())) {
                            RESULT = new Expr(e, symTable);
                        } else {
                            RESULT = null;
                        }
                     }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new Expr(e.getLexeme());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // syncToken ::= FORWARD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syncToken",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // syncToken ::= LINE_TERMINATOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("syncToken",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
