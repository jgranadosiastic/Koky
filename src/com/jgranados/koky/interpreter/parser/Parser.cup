package com.jgranados.koky.interpreter.parser;

import com.jgranados.koky.interpreter.lexer.Lexer;
import com.jgranados.koky.interpreter.lexer.languages.LexerAll;
import com.jgranados.koky.interpreter.lexer.languages.LexerEs;
import com.jgranados.koky.interpreter.lexer.languages.LexerKiche;
import com.jgranados.koky.interpreter.token.Token;
import com.jgranados.koky.interpreter.expr.Expr;
import com.jgranados.koky.interpreter.symbolstable.SymbolsTable;
import com.jgranados.koky.interpreter.symbolstable.ProcedureTable;
import com.jgranados.koky.instructions.logic.Languages;
import com.jgranados.koky.instructions.logic.Messages;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import com.jgranados.koky.instructions.*;
import com.jgranados.koky.instructions.graphicinstructions.*;
import com.jgranados.koky.instructions.varinstructions.*;

import java_cup.runtime.*;


parser code {:
       private Lexer lexerEnglish;
        private LexerEs lexerEs;
        private LexerKiche lexerKi;
        private LexerAll lexerAll;
        private List<String> errorsList;
        private SymbolsTable symTable;
	private ProcedureTable procedureTable;

	// LA TABLA DE SIMBOLOS SE REINICIA CADA VEZ QUE SE SELECCIONA UN IDIOMA
        
        public Parser(Scanner scan, SymbolsTable symTable, ProcedureTable procedureTable){
            super(scan);
             if (Languages.ALL.getTypeLanguage()==true) {
                lexerAll = (LexerAll) scan;
                this.errorsList = lexerAll.getErrorsList();
            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                lexerEnglish = (Lexer) scan;
                this.errorsList = lexerEnglish.getErrorsList();
            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                lexerEs = (LexerEs) scan;
                this.errorsList = lexerEs.getErrorsList();
            }else if (Languages.KICHE.getTypeLanguage()==true) {
                lexerKi = (LexerKiche) scan;
                this.errorsList = lexerKi.getErrorsList();
            }
            this.symTable = symTable;
 	    this.procedureTable = procedureTable; 	
        }
       
        @Override
        public void syntax_error(Symbol st) {
            //validation to respond according to language   
            if (Languages.ALL.getTypeLanguage()==true) {
                getAnalyzingFile(st, Languages.ALL);
            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                getAnalyzingFile(st, Languages.ENGLISH);
            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                getAnalyzingFile(st, Languages.SPANISH);
            }else if (Languages.KICHE.getTypeLanguage()==true) {
                getAnalyzingFile(st, Languages.KICHE);
            }  
        }
        
        public void getAnalyzingFile(Symbol st, Enum typeLanguage){
                if (st.sym != sym.LINE_TERMINATOR) {
                    Token token = (Token) st.value;
                    report_error(Messages.reportError(token.getLexeme(),token.getLine(),token.getColumn()),null);
                    if (typeLanguage.equals(Languages.KICHE)) {
                        if (lexerKi.isAnalyzingFile()) {
                            errorsList(token);
                        } else {
                            errorsList(token);
                        }
                    }else if (typeLanguage.equals(Languages.SPANISH)) {
                        if (lexerEs.isAnalyzingFile()) {
                            errorsList(token);
                        } else {
                            errorsList(token);
                        }
                    }else if (typeLanguage.equals(Languages.ENGLISH)) {
                        if (lexerEnglish.isAnalyzingFile()) {
                            errorsList(token);
                        } else {
                            errorsList(token);
                        }
                    }else if (typeLanguage.equals(Languages.ALL)) {
                        if (lexerAll.isAnalyzingFile()) {
                            errorsList(token);
                        } else {
                            errorsList(token);
                        }
                    }
                }
        }

        public void setLexersAnalyzingFile(boolean flag) {
            //this.lexerAll.setAnalyzingFile(flag);
            //this.lexerEnglish.setAnalyzingFile(flag);
            //this.lexerEs.setAnalyzingFile(flag);
            //this.lexerKi.setAnalyzingFile(flag);
            if (Languages.ALL.getTypeLanguage()==true) {
                lexerAll.setAnalyzingFile(flag);
            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                lexerEnglish.setAnalyzingFile(flag);
            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                lexerEs.setAnalyzingFile(flag);
            }else if (Languages.KICHE.getTypeLanguage()==true) {
                lexerKi.setAnalyzingFile(flag);
            }
        }

        private void getColorError(Enum typeLanguage, int token){
                    if (typeLanguage.equals(Languages.KICHE)) {
                        if (lexerKi.isAnalyzingFile()) {
                            errorsList.add(Messages.colorErrorMessage(token));
                        } else {
                            errorsList.add(Messages.colorErrorMessage(token));
                        }
                    }else if (typeLanguage.equals(Languages.SPANISH)) {
                        if (lexerEs.isAnalyzingFile()) {
                            errorsList.add(Messages.colorErrorMessage(token));
                        } else {
                            errorsList.add(Messages.colorErrorMessage(token));
                        }
                    }else if (typeLanguage.equals(Languages.ENGLISH)) {
                        if (lexerEnglish.isAnalyzingFile()) {
                           errorsList.add(Messages.colorErrorMessage(token));
                        } else {
                            errorsList.add(Messages.colorErrorMessage(token));
                        }
                    }else if (typeLanguage.equals(Languages.ALL)) {
                        if (lexerAll.isAnalyzingFile()) {
                           errorsList.add(Messages.colorErrorMessage(token));
                        } else {
                           errorsList.add(Messages.colorErrorMessage(token));
                        }
                    }
        }
        
        private void errorsList(Token token){
            errorsList.add(Messages.errorCup(token.getLexeme()));
        }   

        public void addSemanticError(String msg) {
            this.errorsList.add(msg);
        }
:}

/* Terminals (tokens returned by the scanner). */
terminal Token          LINE_TERMINATOR, INTEGER_LITERAL, HEXA_LITERAL, ID, COMMA;
terminal Token          OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAR, CLOSE_PAR, PLUS;
terminal Token          MINUS, MULT, DIV, EQ, FORWARD, BACKWARD, RIGHT, LEFT;
terminal Token          CLEARS, PENUP, PENDOWN, TOCENTER, COLOR, POSITIONXY;
terminal Token          POSITIONX, POSITIONY, HIDETURTLE, SHOWTURTLE, TOERASE;
terminal Token          TODRAW, REPEAT,WIDTH;
terminal Token          VOID, CALL, UMINUS;

/* Non-terminals */
non terminal List<Instruction>          program, instructions, instructionsVoid;
non terminal Instruction                instruction, instructionVoid;
non terminal                            syncToken;
non terminal Expr                       expr;
non terminal List<Token>                parameters;
non terminal Token                      parameter;
non terminal                            break;
non terminal List<Expr>                 expresions;
non terminal Expr                       expresion;

/* precedence */
precedence left     PLUS, MINUS;
precedence left     MULT, DIV;
precedence left     UMINUS;

/* The grammar */
start with program;

program ::= instructions:list
                {: RESULT = list; :}
            ;

instructions ::= instructions:list instruction:ins
                    {:  
                        list.add(ins);
                        RESULT = list;
                    :}
                | instruction:ins
                    {:
                        List<Instruction> instructions = new ArrayList<>();
                        instructions.add(ins);
                        RESULT = instructions;
                    :}
                ;

instruction ::=	 FORWARD expr:e  LINE_TERMINATOR
                    {:  
                        System.out.println("un forward con n = " + e);
                        RESULT = new ForwardInstruction(e);
                    :}
                | BACKWARD expr:e  LINE_TERMINATOR
                    {:  
                        System.out.println("un backward con n = " + e);
                        RESULT = new BackwardInstruction(e);
                    :}
                | RIGHT expr:e  LINE_TERMINATOR
                    {:  
                        System.out.println("un RIGHT con n = " + e);
                        RESULT = new RightInstruction(e);
                    :}
                | LEFT expr:e  LINE_TERMINATOR
                    {:  
                        System.out.println("un LEFT con n = " + e);
                        RESULT = new LeftInstruction(e);
                    :}
                | CLEARS  LINE_TERMINATOR
                    {:  
                        System.out.println("un CLEAR ");
                        RESULT = new ClearsInstruction();
                    :}
                | PENUP  LINE_TERMINATOR
                    {:  
                        System.out.println("un PENUP ");
                        RESULT = new TogglePenInstruction(true);
                    :}
                | PENDOWN  LINE_TERMINATOR
                    {:  
                        System.out.println("un PENDOWN ");
                        RESULT = new TogglePenInstruction(false);
                    :}
                | TOCENTER  LINE_TERMINATOR
                    {:  
                        System.out.println("un TOCENTER ");
                        RESULT = new ToCenterInstruction();
                    :}
                | COLOR:color expr:e  LINE_TERMINATOR
                    {:  
                        System.out.println("un color ");
                        RESULT = new ColorInstruction(e);
                        if (e.operate() >= 0 && e.operate() < 10) {
                            RESULT = new ColorInstruction(e);
                        } else {
                            if (Languages.ALL.getTypeLanguage()==true) {
                                if (Languages.ALL.getTypeLanguage()==true) {
                                getColorError(Languages.ALL, e.operate());
                            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                                getColorError(Languages.ENGLISH, e.operate());
                            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                                getColorError(Languages.SPANISH, e.operate());
                            }else if (Languages.KICHE.getTypeLanguage()==true) {
                                getColorError(Languages.KICHE, e.operate());
                            }
                            
                            RESULT = new EmptyInstruction();
                            }
                        }
                    :}
                | COLOR HEXA_LITERAL:e  LINE_TERMINATOR
                    {:  
                        System.out.println("un color ");
                        RESULT = new ColorInstruction(e.getLexeme());
                    :}
                | POSITIONXY expr:ex COMMA expr:ey  LINE_TERMINATOR
                    {:  
                        System.out.println("un POSITIONXY ");
                        RESULT = new PositionXYInstruction(ex, ey);
                    :}
                | POSITIONX expr:ex  LINE_TERMINATOR
                    {:  
                        System.out.println("un POSITIONX ");
                        RESULT = new PositionXInstruction(ex);
                    :}
                | POSITIONY expr:ey  LINE_TERMINATOR
                    {:  
                        System.out.println("un POSITIONY ");
                        RESULT = new PositionYInstruction(ey);
                    :}
                | HIDETURTLE  LINE_TERMINATOR
                    {:  
                        System.out.println("un HIDETURTLE ");
                        RESULT = new ToggleTurtleInstruction(false);
                    :}
                | SHOWTURTLE  LINE_TERMINATOR
                    {:  
                        System.out.println("un SHOWTURTLE ");
                        RESULT = new ToggleTurtleInstruction(true);
                    :}
                | TOERASE  LINE_TERMINATOR
                    {:  
                        System.out.println("un TOERASE ");
                        RESULT = new ToggleDrawInstruction(false);
                    :}
                | TODRAW  LINE_TERMINATOR
                    {:  
                        System.out.println("un TODRAW ");
                        RESULT = new ToggleDrawInstruction(true);
                    :}
                | WIDTH expr:e LINE_TERMINATOR
                    {:
                        if(e.operate() > 0 && e.operate() < 16) {
                            RESULT = new WidthInstruction(e);
                        } else {
                            errorsList.add(Messages.widthErrorMessage(e.operate()));
                        }
                    :}
                | REPEAT expr:e OPEN_BRACKET instructionsVoid:inst CLOSE_BRACKET LINE_TERMINATOR
                    {:
                        System.out.println("un REPEAT CON " + e);
                        RESULT = new RepeatInstruction(e, inst);
                    :}
                | ID:e LINE_TERMINATOR
                    {:
                         if (Languages.ALL.getTypeLanguage()==true) {
                             symTable.addId(e, 0, lexerAll.isAnalyzingFile());
                         }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                            symTable.addId(e, 0, lexerEnglish.isAnalyzingFile());
                         }else if (Languages.SPANISH.getTypeLanguage()==true) {
                            symTable.addId(e, 0, lexerEs.isAnalyzingFile());
                         }else if (Languages.KICHE.getTypeLanguage()==true) {
                            symTable.addId(e, 0, lexerKi.isAnalyzingFile());
                         }
                          RESULT = new EmptyInstruction();
                    :}
                | ID:e EQ expr:ex LINE_TERMINATOR
                    {:
                        if (Languages.ALL.getTypeLanguage()==true) {
                            RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                            //if(!lexerAll.isAnalyzingFile()){
                            //    RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                            //} else {
                            //    symTable.addId(e,ex.operate(),lexerAll.isAnalyzingFile());
                            //}
                         }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                            RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                           //if(!lexerEnglish.isAnalyzingFile()){
                            //    RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                            //} else {
                            //    symTable.addId(e,ex.operate(),lexerEnglish.isAnalyzingFile());
                            //}
                         }else if (Languages.SPANISH.getTypeLanguage()==true) {
                            RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                            //if(!lexerEs.isAnalyzingFile()){
                            //    RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                            //} else {
                            //    symTable.addId(e,ex.operate(),lexerEs.isAnalyzingFile());
                            //}
                         }else if (Languages.KICHE.getTypeLanguage()==true) {
                            RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                            //if(!lexerKi.isAnalyzingFile()){
                            //    RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                            //} else {
                            //    symTable.addId(e,ex.operate(),lexerKi.isAnalyzingFile());
                            //}
                         }
                    :}
                | LINE_TERMINATOR
                    {:  
                        System.out.println("Vacio, no hago nada");
                        RESULT = new EmptyInstruction();
                    :}
                /*| FORWARD error:e syncToken {: System.out.println("--------Error en fd  "+ eleft + eright); RESULT = new EmptyInstruction(); :}*/
                /* | error:e syncToken {: System.out.println("--------Error en fin linea  "); RESULT = new EmptyInstruction(); :}*/
                | error:e syncToken {: System.out.println("--------Error nnn  " + eleft + eright); RESULT = new EmptyInstruction(); :}
                    
                | VOID break ID:id break OPEN_PAR break parameters:parametersList break CLOSE_PAR break OPEN_BRACKET break instructionsVoid:instructions break CLOSE_BRACKET 
                    {:
                    ///////////////
                    if (Languages.ALL.getTypeLanguage()==true) {
                        if (!procedureTable.exists(id, parametersList, symTable, lexerAll.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                            SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerAll.isAnalyzingFile());
                            RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                            symTable.clearTemporal();
                        } else {
                            symTable.removeParameter(id);
                            procedureTable.deleteProcedure(id);
                            RESULT = new EmptyInstruction();

                        }
                    }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                        if (!procedureTable.exists(id, parametersList, symTable, lexerEnglish.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                            SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerEnglish.isAnalyzingFile());
                            RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                            symTable.clearTemporal();
                        } else {
                            symTable.removeParameter(id);
                            procedureTable.deleteProcedure(id);
                            RESULT = new EmptyInstruction();

                        }
                    }else if (Languages.SPANISH.getTypeLanguage()==true) {
                        if (!procedureTable.exists(id, parametersList, symTable, lexerEs.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                            SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerEs.isAnalyzingFile());
                            RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                            symTable.clearTemporal();
                        } else {
                            symTable.removeParameter(id);
                            procedureTable.deleteProcedure(id);
                            RESULT = new EmptyInstruction();

                        }
                    }else if (Languages.KICHE.getTypeLanguage()==true) {
                        if (!procedureTable.exists(id, parametersList, symTable, lexerKi.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                            SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerKi.isAnalyzingFile());
                            RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                            symTable.clearTemporal();
                        } else {
                            symTable.removeParameter(id);
                            procedureTable.deleteProcedure(id);
                            RESULT = new EmptyInstruction();

                        }
                    }

                    //////////////
                    
                    //if (!procedureTable.exists(id, parametersList, lexerAll.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                    //    SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerAll.isAnalyzingFile());
                    //    RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                    //    symTable.clearTemporal();
                    //} else {
                    //    RESULT = new EmptyInstruction();
                    //    
                    //}

                    :}
                |VOID break ID:id  break OPEN_PAR break  CLOSE_PAR break OPEN_BRACKET break instructionsVoid:instructions break CLOSE_BRACKET
                    {:
                    ///////////////
                    List<Token> parametersList = new ArrayList<>();
                    if (Languages.ALL.getTypeLanguage()==true) {
                        if (!procedureTable.exists(id, parametersList, symTable, lexerAll.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                            SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerAll.isAnalyzingFile());
                            RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                            symTable.clearTemporal();
                        } else {
                            symTable.removeParameter(id);
                            procedureTable.deleteProcedure(id);
                            RESULT = new EmptyInstruction();

                        }
                    }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                        if (!procedureTable.exists(id, parametersList, symTable, lexerEnglish.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                            SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerEnglish.isAnalyzingFile());
                            RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                            symTable.clearTemporal();
                        } else {
                            symTable.removeParameter(id);
                            procedureTable.deleteProcedure(id);
                            RESULT = new EmptyInstruction();

                        }
                    }else if (Languages.SPANISH.getTypeLanguage()==true) {
                        if (!procedureTable.exists(id, parametersList, symTable, lexerEs.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                            SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerEs.isAnalyzingFile());
                            RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                            symTable.clearTemporal();
                        } else {
                            symTable.removeParameter(id);
                            procedureTable.deleteProcedure(id);
                            RESULT = new EmptyInstruction();

                        }
                    }else if (Languages.KICHE.getTypeLanguage()==true) {
                        if (!procedureTable.exists(id, parametersList, symTable, lexerKi.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                            SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerKi.isAnalyzingFile());
                            RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                            symTable.clearTemporal();
                        } else {
                            symTable.removeParameter(id);
                            procedureTable.deleteProcedure(id);
                            RESULT = new EmptyInstruction();

                        }
                    }

                    //////////////
                    //List<Token> parametersList = new ArrayList<>();
                    //if (!procedureTable.exists(id, parametersList, lexerAll.isAnalyzingFile()) && symTable.getErrorsList().isEmpty()) {
                    //    SymbolsTable symTableLocal = symTable.createSymTable(parametersList,lexerAll.isAnalyzingFile());
                    //    RESULT = new ProcedureInstruction(id, parametersList, symTableLocal, symTable, instructions, procedureTable);
                    //    symTable.clearTemporal();
                    //} else {
                    //    RESULT = new EmptyInstruction();
                    //    
                    //}
                
                    :}
                
                |CALL break ID:id break OPEN_PAR break expresions:expresions break CLOSE_PAR
                    {:
                     if (procedureTable.compareSentParameters(expresions,id)) {
                            RESULT =  new ProcedureCall(expresions,id,procedureTable,symTable);
                        } else {
                            RESULT = new EmptyInstruction();
                        }   
                    :}
                | CALL break ID:id  break OPEN_PAR break CLOSE_PAR
                    {:
                       if (procedureTable.compareSentParameters(new ArrayList<Expr>(),id)) {
                            RESULT =  new ProcedureCall(new ArrayList<Expr>(),id,procedureTable,symTable);
                        } else {
                            RESULT = new EmptyInstruction();
                        }
                    :}
                
                ;

parameters ::= parameters:parameters break COMMA break parameter:parameter 
                {: parameters.add(parameter);
                   RESULT = parameters;
                :}
                
                | parameter:parameter 
                {:
                    List<Token> parameters = new ArrayList<>();
                    parameters.add(parameter);
                    RESULT = parameters;
                :};
parameter ::= ID:parameter 
                {:

                RESULT = parameter;
                symTable.addTemporal(parameter.getLexeme());

                :};     

expresions ::= expresions:expresions break COMMA break expresion:expresion 
                {: expresions.add(expresion);
                   RESULT = expresions;
                :}
                
                | expresion:expresion 
                {:
                    List<Expr> expresions = new ArrayList<>();
                    expresions.add(expresion);
                    RESULT = expresions;
                :};
expresion ::= expr:expresion 
                {:
            
                RESULT = expresion;
                :};                     
/*Antes se llamaba instructionsRepeat ahora instructionsVoid, solo el nombre se cambio*/
instructionsVoid ::=  instructionsVoid:list break instructionVoid:ins
                            {:  
                                list.add(ins);
                                RESULT = list;
                            :}
                        | instructionVoid:ins
                            {:
                                List<Instruction> instructions = new ArrayList<>();
                                instructions.add(ins);
                                RESULT = instructions;
                            :}
                        ;

break ::=  break  LINE_TERMINATOR | ;

instructionVoid ::=	 FORWARD expr:e
                    {:  
                        System.out.println("un forward con n = " + e);
                        RESULT = new ForwardInstruction(e);
                    :}
                | BACKWARD expr:e
                    {:  
                        System.out.println("un backward con n = " + e);
                        RESULT = new BackwardInstruction(e);
                    :}
                | RIGHT expr:e 
                    {:  
                        System.out.println("un RIGHT con n = " + e);
                        RESULT = new RightInstruction(e);
                    :}
                | LEFT expr:e
                    {:  
                        System.out.println("un LEFT con n = " + e);
                        RESULT = new LeftInstruction(e);
                    :}
                | CLEARS
                    {:  
                        System.out.println("un CLEAR ");
                        RESULT = new ClearsInstruction();
                    :}
                | PENUP
                    {:  
                        System.out.println("un PENUP ");
                        RESULT = new TogglePenInstruction(true);
                    :}
                | PENDOWN
                    {:  
                        System.out.println("un PENDOWN ");
                        RESULT = new TogglePenInstruction(false);
                    :}
                | TOCENTER
                    {:  
                        System.out.println("un TOCENTER ");
                        RESULT = new ToCenterInstruction();
                    :}
                | COLOR:color expr:e
                    {:  
                        System.out.println("un color ");
                        RESULT = new ColorInstruction(e);
                         if (e.operate() >= 0 && e.operate() < 10) {
                            RESULT = new ColorInstruction(e);
                        } else {
                            if (Languages.ALL.getTypeLanguage()==true) {
                                if (Languages.ALL.getTypeLanguage()==true) {
                                getColorError(Languages.ALL, e.operate());
                            }else if (Languages.ENGLISH.getTypeLanguage()==true) {
                                getColorError(Languages.ENGLISH, e.operate());
                            }else if (Languages.SPANISH.getTypeLanguage()==true) {
                                getColorError(Languages.SPANISH, e.operate());
                            }else if (Languages.KICHE.getTypeLanguage()==true) {
                                getColorError(Languages.KICHE, e.operate());
                            }
                            
                            RESULT = new EmptyInstruction();
                            }
                        }
                    :}
                | COLOR HEXA_LITERAL:e
                    {:  
                        System.out.println("un color ");
                        RESULT = new ColorInstruction(e.getLexeme());
                    :}
                | POSITIONXY expr:ex COMMA expr:ey
                    {:  
                        System.out.println("un POSITIONXY ");
                        RESULT = new PositionXYInstruction(ex, ey);
                    :}
                | POSITIONX expr:ex
                    {:  
                        System.out.println("un POSITIONX ");
                        RESULT = new PositionXInstruction(ex);
                    :}
                | POSITIONY expr:ey
                    {:  
                        System.out.println("un POSITIONY ");
                        RESULT = new PositionYInstruction(ey);
                    :}
                | HIDETURTLE
                    {:  
                        System.out.println("un HIDETURTLE ");
                        RESULT = new ToggleTurtleInstruction(false);
                    :}
                | SHOWTURTLE
                    {:  
                        System.out.println("un SHOWTURTLE ");
                        RESULT = new ToggleTurtleInstruction(true);
                    :}
                | TOERASE
                    {:  
                        System.out.println("un TOERASE ");
                        RESULT = new ToggleDrawInstruction(false);
                    :}
                | TODRAW
                    {:  
                        System.out.println("un TODRAW ");
                        RESULT = new ToggleDrawInstruction(true);
                    :}
                | WIDTH expr:e 
                    {:
                        if(e.operate() > 0 && e.operate() < 16) {
                            RESULT = new WidthInstruction(e);
                        } else {
                            errorsList.add(Messages.widthErrorMessage(e.operate()));
                        }
                    :}
                | REPEAT expr:e OPEN_BRACKET instructionsVoid:inst CLOSE_BRACKET
                    {:
                        System.out.println("un REPEAT CON " + e);
                        RESULT = new RepeatInstruction(e, inst);
                    :}
                | ID:e EQ expr:ex
                    {:
                        RESULT = new VarAssignationInstruction(symTable, procedureTable, e, ex);
                    :}
                /*| FORWARD error:e syncToken {: System.out.println("--------Error en fd  "); RESULT = new EmptyInstruction(); :}*/
                /* | error:e syncToken {: System.out.println("--------Error en fin linea  "); RESULT = new EmptyInstruction(); :}*/
                | error:e CLOSE_BRACKET {: System.out.println("--------Error nnn  "); RESULT = new EmptyInstruction(); :}
		
                | CALL break ID:id  break OPEN_PAR break  expresions:expresions break CLOSE_PAR 
                    {:
                       if (procedureTable.compareSentParameters(expresions,id)) {
                            RESULT =  new ProcedureCall(expresions,id,procedureTable,symTable);
                        } else {
                            RESULT = new EmptyInstruction();
                        }
                    :}
                | CALL break ID:id break OPEN_PAR break CLOSE_PAR
                    {:
                       if (procedureTable.compareSentParameters(new ArrayList<Expr>(),id)) {
                            RESULT =  new ProcedureCall(new ArrayList<Expr>(),id,procedureTable,symTable);
                        } else {
                            RESULT = new EmptyInstruction();
                        }
                    :}
                ; 


expr ::=    expr:e1 PLUS expr:e2
                {:
                    RESULT = new Expr(sym.PLUS, e1, e2);
                :}
            | expr:e1 MINUS expr:e2
                {:
                    RESULT = new Expr(sym.MINUS, e1, e2);
                :}
            | expr:e1 MULT expr:e2
                {:
                    RESULT = new Expr(sym.MULT, e1, e2);
                :}
            | expr:e1 DIV expr:e2
                {:
                    RESULT = new Expr(sym.DIV, e1, e2);
                :}
            | MINUS expr:e1
                {:
                    RESULT = new Expr(sym.UMINUS, e1);
                :}
                 %prec UMINUS
            | OPEN_PAR expr:e CLOSE_PAR
                {:
                    RESULT = e;
                :}
            | ID:e
                {:  
                     if (Languages.ALL.getTypeLanguage()==true) {
			if (symTable.verifyTemporalVar(e.getLexeme())) {
                    		RESULT = new Expr(e, symTable);
                    	} else {
                    		if (symTable.exists(e, procedureTable, lexerAll.isAnalyzingFile())) {
                           	 	RESULT = new Expr(e, symTable);
                        	} else {
                            		RESULT = null;
                        	}
                    		
                    	}
        
                     }else if (Languages.ENGLISH.getTypeLanguage()==true) {
			if (symTable.verifyTemporalVar(e.getLexeme())) {
                    		RESULT = new Expr(e, symTable);
                    	} else {
                    		if (symTable.exists(e, procedureTable, lexerEnglish.isAnalyzingFile())) {
                            		RESULT = new Expr(e, symTable);
                        	} else {
                            		RESULT = null;
                        	}
                    		
                    	}
                        
                     }else if (Languages.SPANISH.getTypeLanguage()==true) {
			if (symTable.verifyTemporalVar(e.getLexeme())) {
                    		RESULT = new Expr(e, symTable);
                    	} else {
                    		if (symTable.exists(e, procedureTable, lexerEs.isAnalyzingFile())) {
                            		RESULT = new Expr(e, symTable);
                        	} else {
                            		RESULT = null;
                        	}
                    		
                    	}
                        
                     }else if (Languages.KICHE.getTypeLanguage()==true) {
			if (symTable.verifyTemporalVar(e.getLexeme())) {
                    		RESULT = new Expr(e, symTable);
                    	} else {
                    		if (symTable.exists(e, procedureTable, lexerKi.isAnalyzingFile())) {
                            		RESULT = new Expr(e, symTable);
                        	} else {
                            		RESULT = null;
                        	}
                    		
                    	}
                        
                     }
                :}
            | INTEGER_LITERAL:e
                {:
                    RESULT = new Expr(e.getLexeme());
                :}
            ;

syncToken ::=   FORWARD
                | LINE_TERMINATOR 
                ;
