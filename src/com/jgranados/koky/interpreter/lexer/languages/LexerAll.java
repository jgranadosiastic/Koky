/* The following code was generated by JFlex 1.7.0 */

package com.jgranados.koky.interpreter.lexer.languages;

import java_cup.runtime.*;
import com.jgranados.koky.interpreter.token.Token;
import com.jgranados.koky.interpreter.parser.sym;
import static com.jgranados.koky.interpreter.parser.sym.*;
import java.util.ArrayList;
import java.util.List;
import com.jgranados.koky.instructions.logic.Messages;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>LexerAll.flex</tt>
 */
public class LexerAll implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\2\0\1\10"+
    "\1\4\2\0\1\57\1\50\1\51\1\54\1\52\1\45\1\53\1\0"+
    "\1\55\1\6\11\7\1\5\1\0\1\0\1\56\3\0\1\13\1\14"+
    "\1\15\1\20\1\11\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\12\1\46\1\0\1\47\1\0\1\4\1\0"+
    "\1\13\1\14\1\15\1\16\1\17\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\2\4\1\5\26\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\5\2\1\1\21\1\22\2\1"+
    "\1\23\1\24\1\25\1\0\1\1\1\22\2\1\1\26"+
    "\1\27\1\30\1\1\1\31\2\1\1\32\1\1\1\33"+
    "\3\1\1\34\1\35\1\1\1\0\5\1\1\21\1\1"+
    "\1\25\11\1\1\24\1\31\7\1\1\5\6\1\1\0"+
    "\17\1\1\0\16\1\2\0\6\1\1\0\5\1\1\5"+
    "\6\1\1\0\1\36\1\37\1\40\15\1\2\0\10\1"+
    "\1\36\1\37\5\1\3\0\6\1\1\0\1\1\1\41"+
    "\3\1\1\5\4\1\1\0\1\42\2\1\1\43\6\1"+
    "\1\44\1\1\2\0\3\1\1\0\3\1\1\42\5\1"+
    "\3\0\6\1\1\0\3\1\1\5\4\1\1\0\5\1"+
    "\3\0\2\1\1\0\7\1\1\40\1\27\1\0\3\1"+
    "\1\0\1\26\1\1\1\0\1\1\1\45\3\1\1\0"+
    "\2\1\3\0\1\1\1\33\3\1\1\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\41\2\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\30\1\1\1\32\1\0\2\1\1\31"+
    "\1\1\1\24\1\1\1\0\1\1\1\34\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\300\0\60\0\360"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\300\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0150"+
    "\0\u0660\0\u0690\0\u0150\0\u06c0\0\u0150\0\u06f0\0\u0720\0\u0750"+
    "\0\u0780\0\u07b0\0\u0150\0\u0150\0\u0150\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u0150\0\u08a0\0\u0150\0\u08d0\0\u0900\0\u0930\0\u0150"+
    "\0\u0150\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0150\0\u0ab0\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0150\0\u0150\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0"+
    "\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140"+
    "\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0"+
    "\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440"+
    "\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0"+
    "\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740"+
    "\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0"+
    "\0\u18f0\0\u1920\0\60\0\u0150\0\u1950\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0"+
    "\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u0150\0\u1dd0\0\u1e00\0\u1e30"+
    "\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u0150\0\u20d0\0\u2100"+
    "\0\u2130\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\60"+
    "\0\u2280\0\u22b0\0\u0150\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0"+
    "\0\u23d0\0\u0150\0\u2400\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0"+
    "\0\u2520\0\u2550\0\u2580\0\u25b0\0\u0150\0\u25e0\0\u2610\0\u2640"+
    "\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760\0\u2790\0\u27c0"+
    "\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940"+
    "\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30\0\u2a60\0\u2a90\0\u2ac0"+
    "\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0\0\u2be0\0\u2c10\0\u2c40"+
    "\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30\0\u2d60\0\u2d90\0\60"+
    "\0\60\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\60\0\u2eb0"+
    "\0\u2ee0\0\u2f10\0\u0570\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000"+
    "\0\u3030\0\u3060\0\u3090\0\u30c0\0\u30f0\0\60\0\u3120\0\u3150"+
    "\0\u3180\0\u31b0\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0"+
    "\0\u3300\0\u3330\0\60\0\u3360\0\u3390\0\u33c0\0\u33f0\0\u3420"+
    "\0\u3450\0\u3480\0\u34b0\0\u34e0\0\60\0\u3510\0\60\0\u3540"+
    "\0\u3570\0\u35a0\0\60\0\u35d0\0\60\0\u3600\0\u3630\0\u3660"+
    "\0\60\0\u3690";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\2\12\1\13\1\14\1\15\1\16\1\12\1\16"+
    "\1\17\1\12\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\12\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\12\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\2\62\0"+
    "\1\4\60\0\1\5\60\0\1\52\1\0\2\52\1\0"+
    "\34\52\6\0\1\52\12\0\2\10\50\0\1\53\2\0"+
    "\3\53\2\54\1\53\1\54\1\53\7\54\36\53\6\0"+
    "\2\55\1\0\34\12\21\0\2\55\1\0\16\12\1\56"+
    "\1\12\1\57\3\12\1\60\3\12\1\61\3\12\21\0"+
    "\2\55\1\0\2\12\1\62\12\12\1\63\3\12\1\64"+
    "\2\12\1\65\7\12\12\0\1\66\6\0\2\55\1\0"+
    "\2\12\1\67\7\12\1\70\1\12\1\63\1\12\1\71"+
    "\2\12\1\72\2\12\1\73\1\74\6\12\21\0\2\55"+
    "\1\0\2\12\1\75\3\12\2\76\3\12\1\77\20\12"+
    "\21\0\2\55\1\0\5\12\1\60\1\12\1\60\11\12"+
    "\1\100\12\12\21\0\2\55\1\0\13\12\1\101\12\12"+
    "\1\102\5\12\21\0\2\55\1\0\1\12\1\103\1\104"+
    "\31\12\21\0\2\55\1\0\2\12\1\105\31\12\21\0"+
    "\2\55\1\0\2\12\1\106\11\12\1\107\1\110\3\12"+
    "\1\111\5\12\1\112\4\12\12\0\1\113\6\0\2\55"+
    "\1\0\6\12\2\114\3\12\1\115\2\12\1\116\5\12"+
    "\1\74\1\12\1\104\1\12\1\111\3\12\21\0\2\55"+
    "\1\0\3\12\1\104\15\12\1\117\12\12\21\0\2\55"+
    "\1\0\13\12\1\120\13\12\1\121\4\12\21\0\2\55"+
    "\1\0\5\12\1\65\1\122\1\123\11\12\1\124\2\12"+
    "\1\125\2\12\1\111\4\12\21\0\2\55\1\0\15\12"+
    "\1\102\16\12\21\0\2\55\1\0\6\12\2\126\3\12"+
    "\1\127\10\12\1\63\1\12\1\75\5\12\21\0\2\55"+
    "\1\0\12\12\1\130\1\131\1\12\1\74\10\12\1\110"+
    "\1\132\4\12\21\0\2\55\1\0\1\12\1\133\1\134"+
    "\1\12\1\135\1\136\2\135\5\12\1\136\3\12\1\137"+
    "\4\12\1\102\1\140\4\12\21\0\2\55\1\0\15\12"+
    "\1\141\14\12\1\73\1\12\21\0\2\55\1\0\6\12"+
    "\2\142\11\12\1\143\4\12\1\110\5\12\21\0\2\55"+
    "\1\0\3\12\1\75\1\12\1\121\1\12\1\121\3\12"+
    "\1\144\20\12\21\0\2\55\1\0\15\12\1\65\11\12"+
    "\1\145\4\12\13\0\1\53\2\0\56\53\2\0\3\53"+
    "\2\146\1\53\1\146\1\53\7\146\36\53\6\0\2\55"+
    "\56\0\2\55\1\0\4\12\1\147\27\12\21\0\2\55"+
    "\1\0\4\12\1\150\27\12\21\0\2\55\1\0\2\12"+
    "\1\151\31\12\21\0\2\55\1\0\4\12\1\152\7\12"+
    "\1\153\17\12\21\0\2\55\1\0\24\12\1\154\7\12"+
    "\26\0\1\155\52\0\2\55\1\0\16\12\1\156\15\12"+
    "\21\0\2\55\1\0\13\12\1\157\13\12\1\160\4\12"+
    "\21\0\2\55\1\0\6\12\2\161\24\12\21\0\2\55"+
    "\1\0\16\12\1\162\15\12\21\0\2\55\1\0\24\12"+
    "\1\163\7\12\21\0\2\55\1\0\3\12\1\164\30\12"+
    "\21\0\2\55\1\0\24\12\1\165\7\12\21\0\2\55"+
    "\1\0\5\12\1\166\1\12\1\166\24\12\21\0\2\55"+
    "\1\0\23\12\1\167\10\12\21\0\2\55\1\0\25\12"+
    "\1\170\6\12\21\0\2\55\1\0\13\12\1\171\3\12"+
    "\1\172\14\12\21\0\2\55\1\0\6\12\2\173\24\12"+
    "\21\0\2\55\1\0\23\12\1\174\10\12\53\0\1\175"+
    "\25\0\2\55\1\0\10\12\1\176\17\12\1\177\3\12"+
    "\21\0\2\55\1\0\17\12\1\200\14\12\21\0\2\55"+
    "\1\0\2\12\1\201\31\12\21\0\2\55\1\0\32\12"+
    "\1\202\1\12\21\0\2\55\1\0\17\12\1\203\14\12"+
    "\21\0\2\55\1\0\20\12\1\204\13\12\21\0\2\55"+
    "\1\0\25\12\1\205\6\12\21\0\2\55\1\0\21\12"+
    "\1\206\12\12\21\0\2\55\1\0\22\12\1\207\3\12"+
    "\1\210\5\12\21\0\2\55\1\0\11\12\1\211\22\12"+
    "\21\0\2\55\1\0\21\12\1\212\12\12\21\0\2\55"+
    "\1\0\15\12\1\213\16\12\21\0\2\55\1\0\34\12"+
    "\12\0\1\214\6\0\2\55\1\0\34\12\12\0\1\215"+
    "\6\0\2\55\1\0\22\12\1\216\11\12\21\0\2\55"+
    "\1\0\4\12\1\217\1\220\1\221\1\222\24\12\21\0"+
    "\2\55\1\0\24\12\1\223\7\12\21\0\2\55\1\0"+
    "\34\12\12\0\1\224\6\0\2\55\1\0\24\12\1\225"+
    "\7\12\21\0\2\55\1\0\13\12\1\226\20\12\21\0"+
    "\2\55\1\0\5\12\1\227\1\12\1\227\5\12\1\230"+
    "\16\12\21\0\2\55\1\0\16\12\1\231\15\12\13\0"+
    "\1\53\2\0\3\53\2\232\1\53\1\232\1\53\7\232"+
    "\36\53\6\0\2\55\1\0\6\12\2\233\24\12\21\0"+
    "\2\55\1\0\12\12\1\234\21\12\21\0\2\55\1\0"+
    "\20\12\1\235\13\12\21\0\2\55\1\0\15\12\1\236"+
    "\16\12\21\0\2\55\1\0\2\12\1\237\31\12\21\0"+
    "\2\55\1\0\24\12\1\240\7\12\44\0\1\241\11\0"+
    "\1\242\1\243\21\0\2\55\1\0\16\12\1\244\15\12"+
    "\21\0\2\55\1\0\24\12\1\245\7\12\21\0\2\55"+
    "\1\0\4\12\1\246\15\12\1\223\11\12\21\0\2\55"+
    "\1\0\2\12\1\247\31\12\21\0\2\55\1\0\21\12"+
    "\1\250\12\12\21\0\2\55\1\0\6\12\2\251\24\12"+
    "\21\0\2\55\1\0\27\12\1\252\4\12\21\0\2\55"+
    "\1\0\31\12\1\253\2\12\21\0\2\55\1\0\6\12"+
    "\2\254\24\12\21\0\2\55\1\0\27\12\1\255\4\12"+
    "\21\0\2\55\1\0\26\12\1\256\5\12\21\0\2\55"+
    "\1\0\23\12\1\257\10\12\21\0\2\55\1\0\27\12"+
    "\1\260\4\12\21\0\2\55\1\0\23\12\1\261\10\12"+
    "\21\0\2\55\1\0\34\12\12\0\1\262\37\0\1\263"+
    "\26\0\2\55\1\0\26\12\1\104\5\12\21\0\2\55"+
    "\1\0\2\12\1\264\31\12\21\0\2\55\1\0\22\12"+
    "\1\265\11\12\21\0\2\55\1\0\17\12\1\266\14\12"+
    "\21\0\2\55\1\0\23\12\1\267\10\12\21\0\2\55"+
    "\1\0\27\12\1\270\4\12\21\0\2\55\1\0\5\12"+
    "\1\271\1\12\1\271\17\12\1\272\4\12\21\0\2\55"+
    "\1\0\13\12\1\273\16\12\1\274\1\275\21\0\2\55"+
    "\1\0\4\12\1\276\27\12\21\0\2\55\1\0\6\12"+
    "\2\277\24\12\21\0\2\55\1\0\24\12\1\300\7\12"+
    "\21\0\2\55\1\0\12\12\1\301\21\12\21\0\2\55"+
    "\1\0\31\12\1\302\2\12\21\0\2\55\1\0\34\12"+
    "\12\0\1\303\31\0\1\304\41\0\1\305\52\0\2\55"+
    "\1\0\2\12\1\306\31\12\21\0\2\55\1\0\6\12"+
    "\2\307\24\12\21\0\2\55\1\0\24\12\1\310\7\12"+
    "\21\0\2\55\1\0\24\12\1\311\7\12\21\0\2\55"+
    "\1\0\24\12\1\312\7\12\21\0\2\55\1\0\26\12"+
    "\1\313\5\12\53\0\1\314\25\0\2\55\1\0\26\12"+
    "\1\315\5\12\21\0\2\55\1\0\5\12\1\316\1\12"+
    "\1\316\24\12\21\0\2\55\1\0\26\12\1\317\5\12"+
    "\21\0\2\55\1\0\13\12\1\320\20\12\21\0\2\55"+
    "\1\0\27\12\1\321\4\12\13\0\1\53\2\0\3\53"+
    "\2\322\1\53\1\322\1\53\7\322\36\53\6\0\2\55"+
    "\1\0\20\12\1\323\13\12\21\0\2\55\1\0\21\12"+
    "\1\121\12\12\21\0\2\55\1\0\1\12\1\324\32\12"+
    "\21\0\2\55\1\0\31\12\1\325\2\12\21\0\2\55"+
    "\1\0\24\12\1\65\7\12\21\0\2\55\1\0\2\12"+
    "\1\326\31\12\37\0\1\327\77\0\1\330\21\0\2\55"+
    "\1\0\13\12\1\331\20\12\21\0\2\55\1\0\12\12"+
    "\1\60\21\12\21\0\2\55\1\0\24\12\1\332\7\12"+
    "\21\0\2\55\1\0\24\12\1\333\7\12\21\0\2\55"+
    "\1\0\4\12\1\334\27\12\21\0\2\55\1\0\14\12"+
    "\1\335\17\12\21\0\2\55\1\0\2\12\1\336\31\12"+
    "\21\0\2\55\1\0\26\12\1\337\5\12\21\0\2\55"+
    "\1\0\13\12\1\340\20\12\21\0\2\55\1\0\2\12"+
    "\1\341\31\12\21\0\2\55\1\0\21\12\1\111\12\12"+
    "\21\0\2\55\1\0\16\12\1\342\15\12\21\0\2\55"+
    "\1\0\6\12\2\343\24\12\53\0\1\344\57\0\1\345"+
    "\25\0\2\55\1\0\20\12\1\346\13\12\21\0\2\55"+
    "\1\0\13\12\1\347\20\12\21\0\2\55\1\0\2\12"+
    "\1\350\31\12\21\0\2\55\1\0\34\12\12\0\1\351"+
    "\6\0\2\55\1\0\31\12\1\352\2\12\21\0\2\55"+
    "\1\0\21\12\1\353\12\12\21\0\2\55\1\0\22\12"+
    "\1\111\11\12\21\0\2\55\1\0\4\12\1\354\21\12"+
    "\1\354\5\12\21\0\2\55\1\0\33\12\1\355\21\0"+
    "\2\55\1\0\6\12\2\356\24\12\21\0\2\55\1\0"+
    "\2\12\1\357\23\12\1\360\5\12\21\0\2\55\1\0"+
    "\21\12\1\361\12\12\21\0\2\55\1\0\26\12\1\75"+
    "\5\12\21\0\2\55\1\0\26\12\1\362\5\12\37\0"+
    "\1\363\57\0\1\364\60\0\1\365\40\0\2\55\1\0"+
    "\24\12\1\366\7\12\21\0\2\55\1\0\20\12\1\367"+
    "\13\12\21\0\2\55\1\0\2\12\1\370\31\12\21\0"+
    "\2\55\1\0\2\12\1\371\31\12\21\0\2\55\1\0"+
    "\2\12\1\372\31\12\21\0\2\55\1\0\1\12\1\373"+
    "\32\12\72\0\1\374\6\0\2\55\1\0\21\12\1\375"+
    "\12\12\21\0\2\55\1\0\12\12\1\121\21\12\21\0"+
    "\2\55\1\0\23\12\1\376\10\12\21\0\2\55\1\0"+
    "\20\12\1\377\13\12\13\0\1\53\2\0\3\53\2\u0100"+
    "\1\53\1\u0100\1\53\7\u0100\36\53\6\0\2\55\1\0"+
    "\26\12\1\u0101\5\12\21\0\2\55\1\0\2\12\1\u0102"+
    "\31\12\21\0\2\55\1\0\2\12\1\u0103\31\12\21\0"+
    "\2\55\1\0\5\12\1\u0104\1\12\1\u0104\24\12\41\0"+
    "\1\u0105\37\0\2\55\1\0\14\12\1\63\17\12\21\0"+
    "\2\55\1\0\25\12\1\74\6\12\21\0\2\55\1\0"+
    "\12\12\1\u0106\21\12\21\0\2\55\1\0\2\12\1\u0107"+
    "\31\12\21\0\2\55\1\0\24\12\1\u0108\7\12\21\0"+
    "\2\55\1\0\27\12\1\u0109\4\12\21\0\2\55\1\0"+
    "\6\12\2\u010a\24\12\21\0\2\55\1\0\23\12\1\333"+
    "\10\12\21\0\2\55\1\0\34\12\12\0\1\u010b\57\0"+
    "\1\u010c\31\0\1\u010d\34\0\2\55\1\0\26\12\1\u010e"+
    "\5\12\21\0\2\55\1\0\2\12\1\u010f\31\12\21\0"+
    "\2\55\1\0\24\12\1\244\7\12\26\0\1\u0110\52\0"+
    "\2\55\1\0\27\12\1\u0111\4\12\21\0\2\55\1\0"+
    "\31\12\1\u0112\2\12\21\0\2\55\1\0\13\12\1\u0113"+
    "\20\12\21\0\2\55\1\0\25\12\1\u0114\6\12\21\0"+
    "\2\55\1\0\26\12\1\342\5\12\21\0\2\55\1\0"+
    "\13\12\1\u0115\20\12\21\0\2\55\1\0\4\12\1\u0116"+
    "\27\12\21\0\2\55\1\0\27\12\1\u0117\4\12\43\0"+
    "\1\u0118\55\0\1\u0119\44\0\1\u011a\52\0\2\55\1\0"+
    "\26\12\1\u011b\5\12\21\0\2\55\1\0\26\12\1\u011c"+
    "\5\12\21\0\2\55\1\0\31\12\1\136\2\12\21\0"+
    "\2\55\1\0\25\12\1\u011d\6\12\21\0\2\55\1\0"+
    "\25\12\1\u011d\3\12\1\136\2\12\21\0\2\55\1\0"+
    "\34\12\12\0\1\u011e\43\0\1\u011f\22\0\2\55\1\0"+
    "\24\12\1\u0120\7\12\21\0\2\55\1\0\34\12\12\0"+
    "\1\u0121\6\0\2\55\1\0\13\12\1\u0122\20\12\13\0"+
    "\1\53\2\0\3\53\2\u0123\1\53\1\u0123\1\53\7\u0123"+
    "\36\53\6\0\2\55\1\0\24\12\1\u0124\7\12\21\0"+
    "\2\55\1\0\24\12\1\60\7\12\21\0\2\55\1\0"+
    "\24\12\1\u0125\7\12\21\0\2\55\1\0\21\12\1\u0126"+
    "\12\12\37\0\1\u0127\41\0\2\55\1\0\2\12\1\75"+
    "\31\12\21\0\2\55\1\0\24\12\1\136\7\12\21\0"+
    "\2\55\1\0\5\12\1\60\1\12\1\60\24\12\21\0"+
    "\2\55\1\0\24\12\1\u0128\7\12\21\0\2\55\1\0"+
    "\24\12\1\u0129\7\12\37\0\1\u012a\61\0\1\u012b\55\0"+
    "\1\u012c\41\0\2\55\1\0\2\12\1\u012d\31\12\21\0"+
    "\2\55\1\0\24\12\1\74\7\12\27\0\1\u012e\51\0"+
    "\2\55\1\0\4\12\1\317\27\12\21\0\2\55\1\0"+
    "\20\12\1\65\13\12\21\0\2\55\1\0\21\12\1\u012f"+
    "\12\12\21\0\2\55\1\0\21\12\1\316\12\12\21\0"+
    "\2\55\1\0\24\12\1\342\7\12\21\0\2\55\1\0"+
    "\6\12\2\u0130\24\12\21\0\2\55\1\0\24\12\1\u0131"+
    "\7\12\44\0\1\u0132\34\0\2\55\1\0\21\12\1\u0133"+
    "\12\12\21\0\2\55\1\0\6\12\2\u0134\24\12\21\0"+
    "\2\55\1\0\6\12\2\135\24\12\37\0\1\u0135\41\0"+
    "\2\55\1\0\26\12\1\u0136\5\12\26\0\1\u0137\52\0"+
    "\2\55\1\0\15\12\1\65\16\12\21\0\2\55\1\0"+
    "\21\12\1\73\12\12\21\0\2\55\1\0\5\12\1\63"+
    "\1\12\1\63\24\12\21\0\2\55\1\0\24\12\1\135"+
    "\7\12\42\0\1\u0138\36\0\2\55\1\0\26\12\1\u0139"+
    "\5\12\21\0\2\55\1\0\5\12\1\u013a\1\12\1\u013a"+
    "\24\12\41\0\1\u013b\63\0\1\u013c\53\0\1\u013d\37\0"+
    "\2\55\1\0\24\12\1\111\7\12\21\0\2\55\1\0"+
    "\20\12\1\u013e\13\12\21\0\2\55\1\0\5\12\1\u013f"+
    "\1\12\1\u013f\24\12\21\0\2\55\1\0\26\12\1\u0140"+
    "\5\12\37\0\1\u0141\41\0\2\55\1\0\24\12\1\u0142"+
    "\7\12\21\0\2\55\1\0\24\12\1\73\7\12\27\0"+
    "\1\u0143\51\0\2\55\1\0\27\12\1\u0144\4\12\27\0"+
    "\1\u0145\106\0\1\242\1\243\21\0\2\55\1\0\16\12"+
    "\1\u0146\15\12\21\0\2\55\1\0\2\12\1\104\31\12"+
    "\41\0\1\u0147\57\0\1\u0148\37\0\2\55\1\0\32\12"+
    "\1\274\1\275\21\0\2\55\1\0\6\12\2\u0149\24\12"+
    "\21\0\2\55\1\0\16\12\1\u014a\15\12\41\0\1\u014b"+
    "\37\0\2\55\1\0\26\12\1\u014c\5\12\72\0\1\u014d"+
    "\6\0\2\55\1\0\11\12\1\u014e\22\12\21\0\2\55"+
    "\1\0\6\12\2\102\24\12\45\0\1\u014f\33\0\2\55"+
    "\1\0\24\12\1\63\7\12\21\0\2\55\1\0\6\12"+
    "\2\110\24\12\21\0\2\55\1\0\27\12\1\u0150\4\12"+
    "\21\0\2\55\1\0\2\12\1\110\31\12\41\0\1\u0151"+
    "\37\0\2\55\1\0\11\12\1\u0152\22\12\21\0\2\55"+
    "\1\0\2\12\1\102\31\12\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\30\1\12\11"+
    "\14\1\1\0\24\1\1\0\41\1\1\0\17\1\1\0"+
    "\16\1\2\0\6\1\1\0\14\1\1\0\1\1\1\11"+
    "\16\1\2\0\17\1\3\0\6\1\1\0\12\1\1\0"+
    "\1\11\13\1\2\0\3\1\1\0\11\1\3\0\6\1"+
    "\1\0\10\1\1\0\5\1\3\0\2\1\1\0\7\1"+
    "\2\11\1\0\3\1\1\0\1\11\1\1\1\0\5\1"+
    "\1\0\2\1\3\0\1\1\1\11\3\1\1\0\2\1"+
    "\1\0\1\1\2\0\2\1\1\11\2\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private boolean analyzingFile = false;
    private List<String> errorsList;
    private Symbol symbol(int type) {
        String lexeme = yytext();
        System.out.printf("Token tipo %d, lexeme %s, en linea %d, columna %d\n", type, lexeme == null ? "" : lexeme, yyline + 1, yycolumn + 1);
        return new Symbol(type, new Token(lexeme, yyline + 1, yycolumn + 1));
    }

    private Symbol symbol(int type, String lexeme) {
        System.out.printf("Token tipo %d, lexeme %s, en linea %d, columna %d\n", type, lexeme == null ? "" : lexeme, yyline + 1, yycolumn + 1);
        return new Symbol(type, new Token(lexeme, yyline + 1, yycolumn + 1));
    }

    private void error(String lexeme) {
        if (isAnalyzingFile()) {
            System.out.printf("I don't understand the text %s in the line %d, column %d. Delete it and try again\n", lexeme, yyline + 1, yycolumn + 1);
            errorsList.add(Messages.errorLexer(lexeme));
        } else {
            System.out.printf("I don't understand the text %s in the instruction. Delete it and try again.\n", lexeme);
            errorsList.add(Messages.errorLexer(lexeme));
        }
    }

    public void setAnalyzingFile(boolean value) {
        analyzingFile = value;
    }

    public boolean isAnalyzingFile() {
        return analyzingFile;
    }

    public List<String> getErrorsList() {
        return errorsList;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerAll(java.io.Reader in) {
      errorsList = new ArrayList<>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error(yytext());
            } 
            // fall through
          case 38: break;
          case 2: 
            { return symbol(LINE_TERMINATOR);
            } 
            // fall through
          case 39: break;
          case 3: 
            { /*return symbol(WHITESPACE); */
            } 
            // fall through
          case 40: break;
          case 4: 
            { return symbol(INTEGER_LITERAL, yytext());
            } 
            // fall through
          case 41: break;
          case 5: 
            { /* ignoring */
            } 
            // fall through
          case 42: break;
          case 6: 
            { return symbol(COMMA);
            } 
            // fall through
          case 43: break;
          case 7: 
            { return symbol(OPEN_BRACKET);
            } 
            // fall through
          case 44: break;
          case 8: 
            { return symbol(CLOSE_BRACKET);
            } 
            // fall through
          case 45: break;
          case 9: 
            { return symbol(OPEN_PAR);
            } 
            // fall through
          case 46: break;
          case 10: 
            { return symbol(CLOSE_PAR);
            } 
            // fall through
          case 47: break;
          case 11: 
            { return symbol(PLUS);
            } 
            // fall through
          case 48: break;
          case 12: 
            { return symbol(MINUS);
            } 
            // fall through
          case 49: break;
          case 13: 
            { return symbol(MULT);
            } 
            // fall through
          case 50: break;
          case 14: 
            { return symbol(DIV);
            } 
            // fall through
          case 51: break;
          case 15: 
            { return symbol(EQ);
            } 
            // fall through
          case 52: break;
          case 16: 
            { return symbol(ID, yytext());
            } 
            // fall through
          case 53: break;
          case 17: 
            { return symbol(WIDTH);
            } 
            // fall through
          case 54: break;
          case 18: 
            { return symbol(FORWARD);
            } 
            // fall through
          case 55: break;
          case 19: 
            { return symbol(BACKWARD);
            } 
            // fall through
          case 56: break;
          case 20: 
            { return symbol(TOERASE);
            } 
            // fall through
          case 57: break;
          case 21: 
            { return symbol(PENDOWN);
            } 
            // fall through
          case 58: break;
          case 22: 
            { return symbol(TOCENTER);
            } 
            // fall through
          case 59: break;
          case 23: 
            { return symbol(CLEARS);
            } 
            // fall through
          case 60: break;
          case 24: 
            { return symbol(RIGHT);
            } 
            // fall through
          case 61: break;
          case 25: 
            { return symbol(TODRAW);
            } 
            // fall through
          case 62: break;
          case 26: 
            { return symbol(HIDETURTLE);
            } 
            // fall through
          case 63: break;
          case 27: 
            { return symbol(LEFT);
            } 
            // fall through
          case 64: break;
          case 28: 
            { return symbol(SHOWTURTLE);
            } 
            // fall through
          case 65: break;
          case 29: 
            { return symbol(PENUP);
            } 
            // fall through
          case 66: break;
          case 30: 
            { return symbol(POSITIONX);
            } 
            // fall through
          case 67: break;
          case 31: 
            { return symbol(POSITIONY);
            } 
            // fall through
          case 68: break;
          case 32: 
            { return symbol(CALL);
            } 
            // fall through
          case 69: break;
          case 33: 
            { return symbol(VOID);
            } 
            // fall through
          case 70: break;
          case 34: 
            { return symbol(POSITIONXY);
            } 
            // fall through
          case 71: break;
          case 35: 
            { return symbol(COLOR);
            } 
            // fall through
          case 72: break;
          case 36: 
            { return symbol(REPEAT);
            } 
            // fall through
          case 73: break;
          case 37: 
            { return symbol(HEXA_LITERAL, yytext());
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
